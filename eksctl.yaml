# eksctl create cluster --name=cluster-1 --nodes-min=3 --nodes-max=5 --enable-ssm --node-volume-size=50 --node-volume-type=io1  --spot --instance-types=c3.large,c4.large,c5.large

apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: cluster-6
  region: eu-central-1

iam:
  withOIDC: true
  serviceAccounts:
    - metadata:
        name: s3-reader
        # if no namespace is set, "default" will be used;
        # the namespace will be created if it doesn't exist already
        namespace: backend-apps
        labels: { aws-usage: "application" }
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: ebs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: efs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        efsCSIController: true
    - metadata:
        name: external-dns
        namespace: kube-system
      wellKnownPolicies:
        externalDNS: true
    - metadata:
        name: cert-manager
        namespace: cert-manager
      wellKnownPolicies:
        certManager: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
        labels: { aws-usage: "cluster-ops" }
      wellKnownPolicies:
        autoScaler: true
    - metadata:
        name: build-service
        namespace: ci-cd
      wellKnownPolicies:
        imageBuilder: true
    - metadata:
        name: cache-access
        namespace: backend-apps
        labels: { aws-usage: "application" }
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess"
    - metadata:
        name: autoscaler-service
        namespace: kube-system
      attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:DescribeTags"
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: "*"
    - metadata:
        name: some-app
        namespace: default
      attachRoleARN: arn:aws:iam::123:role/already-created-role-for-app

nodeGroups:
  - name: ng-1
    minSize: 2
    maxSize: 5
    instanceType: m5.large
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/cluster-13: "owned"
cloudWatch:
  clusterLogging:
    # enable specific types of cluster control plane logs
    enableTypes: ["audit", "authenticator", "controllerManager"]
    # all supported types: "api", "audit", "authenticator", "controllerManager", "scheduler"
    # supported special values: "*" and "all"
addons:
  - name: vpc-cni # no version is specified so it deploys the default version
    attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
  - name: coredns
    version: latest # auto discovers the latest available
  - name: kube-proxy
    version: latest
